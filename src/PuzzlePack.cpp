#include "PuzzlePack.h"

class ClassicPuzzlePack : public PuzzlePack
{
public:
	ClassicPuzzlePack(const char *name, uint32 *data, const uint32 size);
	uint8 MovesRequired(const uint32 &index);
};

static uint32 DefaultPack[] = 
{
	0x00005400,	0x015a82b5,	0x00adef6a,	0x01b88360,	0x01bc5eef,
	0x00ead400,	0x00f8c62f,	0x00aaa880,	0x007d3bea,	0x000039ce,
	0x00ead6b5,	0x00a76d5f,	0x0022aa88,	0x00210800,	0x00010040,
	0x01f08421,	0x01f71000,	0x00455544,	0x01505415,	0x00004400,
	0x0021385e,	0x00e8c62e,	0x00467000,	0x012fc400,	0x01e79c61,
	0x0118fe31,	0x004211c4,	0x01ce7000,	0x00000040,	0x00001000,
	0x011cd671,	0x01f1111f,	0x0198d508,	0x01eb4634,	0x000ac558,
	0x011fc544,	0x000739c0,	0x01555555,	0x00a60c2a,	0x00002800,
	0x00421151,	0x00749d27,	0x00e11d71,	0x00e27f60,	0x0157f0ae,
	0x00477dc4,	0x010917e4,	0x00089220,	0x01151151,	0x01ffffff
};

static uint32 SixPack[] =
{
	0x00ad7578,	0x014a6ba0,	0x03f763dc,	0x00b5916c,	0x00878240,
	0x029cae78,	0x010c2e40,	0x02d92d24,	0x0365cbe4,	0x03d9edfc,
	0x01b3a170,	0x03d46e78,	0x012e6c68,	0x01a5a1dc,	0x006f43c0,
	0x00a8bcd8,	0x00d5f820,	0x025a1f68,	0x0191b348,	0x01f5b1a0,
	0x00c87040,	0x0365d3b8,	0x01a7bad4,	0x01b386c8,	0x00eddb80,
	0x01e74be0,	0x03b81f38,	0x01051fc8,	0x01839c50,	0x01058820,
	0x023e1494,	0x000da500,	0x0172909c,	0x01f1c364,	0x01a45bec,
	0x022e5200,	0x024cc9b0,	0x01929974,	0x01d2aa90,	0x031e06c0,
	0x00b552e0,	0x0093e4a8,	0x0064ceb0,	0x01f7d9b0,	0x0359c490,
	0x01611ec8,	0x028b467c,	0x025a1fa0,	0x036a5a24,	0x014795d8,
	0x03cc57b8,	0x02ff4bdc,	0x0285bf8c,	0x0093d0e0,	0x00d1d8e0,
	0x01b3aad0,	0x02c1dc34,	0x014bab90,	0x00b0ceb4,	0x00b5c934,
	0x010582d0,	0x039eafb0,	0x00ad57ec,	0x002efe78,	0x03d87fa0,
	0x01f7e378,	0x03b8db00,	0x01f6d168,	0x018f8720,	0x0040bc58,
	0x01b69600,	0x02771b40,	0x0360def4,	0x036b1688,	0x03f12e48,
	0x01ef6d78,	0x00c4e340,	0x00549d34,	0x00934100,	0x0377e558,
	0x02d163dc,	0x01279c1c,	0x02db37b8,	0x01ff2c7c,	0x002c4db8,
	0x01f491dc,	0x0378fc40,	0x03498b08,	0x014eae90,	0x0050b1a0,
	0x007db960,	0x01f4ba90,	0x00acef68,	0x00a8cdb0,	0x005c62c0,
	0x01b7fd74,	0x0194f840,	0x03dc0c98,	0x035f0410,	0x0065defc
};

static uint32 SevenPack[] = 
{
	0x02f5dd24,	0x02527970,	0x02c1ff74,	0x01e5fd40,	0x0123edd4,
	0x03ca05c8,	0x024acbd4,	0x01308d28,	0x03d10ffc,	0x0325aad0,
	0x03c22a28,	0x00d1c140,	0x030d60c0,	0x038b41b0,	0x02858cdc,
	0x01d20ee0,	0x003222b0,	0x022c8b90,	0x015e4640,	0x0057a4b4,
	0x012cd448,	0x03c5bf18,	0x02ed45cc,	0x01b1a6b8,	0x02486500,
	0x03ad6fc0,	0x0183d5c0,	0x00e9bc00,	0x02a3db4c,	0x01dd4ef4,
	0x03676f20,	0x01ef2f44,	0x03f9f714,	0x03b472c0,	0x037bfd7c,
	0x02a5bd5c,	0x01f09230,	0x02ad5ac8,	0x0197f5e0,	0x00e9ec80,
	0x035bf1a8,	0x01a0b9dc,	0x00540a90,	0x02cbde34,	0x00adff40,
	0x01a9b3fc,	0x017ebb60,	0x00ded6fc,	0x0107eef4,	0x024a4dd0,
	0x02bd96f4,	0x022246e0,	0x02e777b8,	0x034277b8,	0x01adec40,
	0x01a19940,	0x01bbe854,	0x0187e5c0,	0x00b089a4,	0x020d5cc0,
	0x00b04900,	0x02458480,	0x00d40ec0,	0x03bcbd80,	0x000de068,
	0x011fb3a4,	0x02a4de00,	0x01f78f88,	0x0341ba90,	0x01956e38,
	0x024ef06c,	0x03c696c8,	0x00d3a210,	0x0145b250,	0x005891b8,
	0x02775688,	0x01b2e280,	0x01e9a274,	0x0275fb24,	0x03dd1668,
	0x03bcefa0,	0x00b03490,	0x00da10e8,	0x0076d340,	0x03f67440,
	0x017097f8,	0x01b2c0a0,	0x01f0e0dc,	0x0082fa74,	0x01e383fc,
	0x00a88aa0,	0x00dcaa80,	0x023d9290,	0x0349a9dc,	0x0356dd7c,
	0x0285cb4c,	0x0329bf74,	0x018239ec,	0x00d908a4,	0x03ebbde0
};

static uint32 EightPack[] = 
{
	0x03907570,	0x03c7d620,	0x034e3970,	0x02bdd0b8,	0x019b6bb0,
	0x01bb0ce4,	0x01b32940,	0x008d50a8,	0x03cc118c,	0x01f0aa64,
	0x03b65210,	0x02544ad0,	0x020ba89c,	0x0039c638,	0x026f8970,
	0x0001edc0,	0x03f16080,	0x03dbdc48,	0x0284a900,	0x01625c90,
	0x02af63ec,	0x024ac310,	0x0001ec00,	0x001256c0,	0x02e6e208,
	0x012a3640,	0x0188bbb0,	0x01b901f0,	0x0226bdb0,	0x0285bca8,
	0x0192ed34,	0x03b6e928,	0x02b2fef4,	0x0341cfc4,	0x00764ec0,
	0x020ef598,	0x0189ab38,	0x037fc954,	0x02efa4d0,	0x02e631a8,
	0x03f7f438,	0x01f0f9f0,	0x00da5c58,	0x011f13c0,	0x00259efc,
	0x00376e40,	0x0367f5c0,	0x02769d60,	0x00b788c0,	0x01b2ba40,
	0x035a1c60,	0x0182dac8,	0x015434b0,	0x012c5268,	0x028b17f0,
	0x01f5b874,	0x0258ae70,	0x00f11d7c,	0x01d96bfc,	0x0387ea00,
	0x01f85014,	0x012e40ec,	0x01f2df5c,	0x01e4a9f0,	0x00ca0f80,
	0x01529d14,	0x0352df54,	0x02915448,	0x025e94e8,	0x0354f134,
	0x02320e70,	0x01855cc0,	0x01f18930,	0x002e73e0,	0x033d75dc,
	0x009ec878,	0x02a3f770,	0x0117ec34,	0x00b873f0,	0x03e45560,
	0x00c8f91c,	0x00b446a0,	0x00e351fc,	0x02c08b10,	0x02e6ac88,
	0x011ffe80,	0x0146d138,	0x0286ea00,	0x02e5cf68,	0x001d2cec,
	0x012e9914,	0x03f7e7c4,	0x01fc29d0,	0x007c2780,	0x0194c8a8,
	0x03f76e10,	0x026650f8,	0x009b3d70,	0x032fcf90,	0x01d4bd2c
};

static uint32 NinePack[] =
{
	0x03907db8,	0x015ac310,	0x00a6a220,	0x0146af3c,	0x03e77900,
	0x009f1f20,	0x01fd2dd8,	0x036e7318,	0x00112544,	0x0346d86c,
	0x0015c7f0,	0x02275744,	0x035e9ee0,	0x024ac398,	0x01711988,
	0x00d16bec,	0x02c611ec,	0x03e725a8,	0x03784080,	0x0205b5b0,
	0x02d20d10,	0x0059e0ec,	0x0067b814,	0x0030d298,	0x0132e20c,
	0x0379bc60,	0x01b029f0,	0x0397ba00,	0x02d5fb7c,	0x011f0330,
	0x0041f1d0,	0x01550628,	0x022116d0,	0x031ff230,	0x00bc8ac0,
	0x016bedc4,	0x0020d074,	0x00aaa790,	0x02826a54,	0x01bf9970,
	0x0276da70,	0x03d8b0f0,	0x00e4fa68,	0x0146d850,	0x01977f0c,
	0x03583f50,	0x00c76618,	0x02b60110,	0x01ab2610,	0x00bb7178,
	0x0185e1b8,	0x02f0a560,	0x00f44380,	0x02110670,	0x01278c40,
	0x03d0f9f0,	0x0336fb2c,	0x00582678,	0x03225d00,	0x02a0096c,
	0x01077ba8,	0x00bb7770,	0x006c2830,	0x010dabe4,	0x0346e640,
	0x02aa4640,	0x01928d30,	0x0128ff74,	0x03e08580,	0x0058d860,
	0x02e54948,	0x01b01740,	0x02b20470,	0x02476b50,	0x01330cc8,
	0x015e8898,	0x02d6aa18,	0x01a4c610,	0x007591f0,	0x003fc6e0,
	0x029faf80,	0x0096f060,	0x012c7590,	0x02ca6fa0,	0x0259d7b0,
	0x01a15468,	0x01a88500,	0x03d2d6d0,	0x022fec5c,	0x035a97d4,
	0x029c2ea8,	0x00872334,	0x02a3a860,	0x015dba30,	0x02513d20,
	0x01da9734,	0x028c48dc,	0x020b8b00,	0x02a5b650,	0x024a9e48
};

static uint32 TenPack[] =
{
	0x03907d30,	0x03cb4f40,	0x02b66340,	0x01e8b488,	0x00d51744,
	0x03600d50,	0x02d7dd98,	0x01e652e0,	0x033e9f8c,	0x033cc6f0,
	0x03c245a8,	0x005ef710,	0x01977608,	0x025c7580,	0x026553f0,
	0x015ec374,	0x02641808,	0x036adfa8,	0x00e15d00,	0x0056f068,
	0x0137fb04,	0x02f65ae8,	0x027266b4,	0x01dbce48,	0x0153dc10,
	0x01fd0ce0,	0x01658268,	0x03085f80,	0x032c6938,	0x02cd0808,
	0x01a13f98,	0x035f0d68,	0x01be1830,	0x0131cb80,	0x015da320,
	0x00246290,	0x008d0dc0,	0x01ad71d8,	0x01ae497c,	0x017207d4,
	0x017ef368,	0x02348160,	0x010d2dc4,	0x01ae78e0,	0x01ac7dc0,
	0x00d6d758,	0x030abd80,	0x00d52ef4,	0x0095ea24,	0x01632740,
	0x03783264,	0x026fe45c,	0x03fe00a8,	0x02b587d4,	0x00b47b20,
	0x00079618,	0x02281a18,	0x01de8c18,	0x01b52110,	0x03d14660,
	0x01bec1a8,	0x003de928,	0x022fc27c,	0x026d7b70,	0x000faa68,
	0x0255d2d0,	0x0064fd68,	0x037a1960,	0x01bf91b4,	0x03344700,
	0x00d2f9c0,	0x0342a334,	0x00df78e8,	0x01239c60,	0x01b51de8,
	0x00b1a8c8,	0x01e88a38,	0x00892a20,	0x039504c4,	0x032b9260,
	0x00cc67e0,	0x01502ca0,	0x009b8e98,	0x02047d40,	0x001f8e58,
	0x03a45958,	0x014b6038,	0x03682a6c,	0x0259fd70,	0x00d72588,
	0x00823bfc,	0x01d204a8,	0x030f1ce8,	0x00bb09e0,	0x02bcf3b0,
	0x0376bdf0,	0x02c610ac,	0x01212c14,	0x000761c0,	0x010929a0
};

static uint32 ElevenPack[] =
{
	0x01cbe104,	0x028a6450,	0x03359688,	0x01d5e250,	0x0115c048,
	0x012cd32c,	0x016a16a8,	0x0278541c,	0x005af3a8,	0x003ff110,
	0x01e91500,	0x02bbe198,	0x01be8300,	0x02cefce0,	0x03b24ce0,
	0x00b3d5fc,	0x03085f2c,	0x00c7961c,	0x01ffb46c,	0x01320f20,
	0x0203eb74,	0x001fa408,	0x030b8de0,	0x01096e20,	0x0055d9a4,
	0x007c7eec,	0x02076e70,	0x01d98064,	0x013439e0,	0x000dd4b8,
	0x03b9647c,	0x01a1ff10,	0x039fb134,	0x01971f40,	0x02b03360,
	0x003f9050,	0x01955e80,	0x02135ce8,	0x0191a510,	0x03ef6f28,
	0x039483e4,	0x01e2df1c,	0x0082f1c0,	0x00058040,	0x0370d97c,
	0x007cad84,	0x03682680,	0x03f3e228,	0x020de150,	0x03e4bad0,
	0x02ed2820,	0x01173574,	0x005dbf3c,	0x039357e8,	0x00be24f8,
	0x01318078,	0x02ad0db8,	0x0015b300,	0x0248e838,	0x016ac440,
	0x00227b8c,	0x02d69260,	0x03c71d38,	0x011174c0,	0x01886458,
	0x02ad1e44,	0x03b2c12c,	0x01bdcc30,	0x0163bbf4,	0x02271ab4,
	0x00be3474,	0x011ac548,	0x012993a8,	0x03269944,	0x0083d040,
	0x01abdd20,	0x0326c998,	0x032355c8,	0x019e1f80,	0x01ed526c,
	0x00bf2280,	0x03d6e0c0,	0x028793c0,	0x03e84ce0,	0x01befc4c,
	0x00dd8b30,	0x00094424,	0x02cb8240,	0x009034c0,	0x01760e68,
	0x01246be8,	0x01171660,	0x030ff688,	0x009d9558,	0x01b00ba4,
	0x019c3d48,	0x01da132c,	0x009bb220,	0x01d05f88,	0x0028e600
};

static uint32 TwelvePack[] =
{
	0x0229d688,	0x03d0cca8,	0x0134dbc4,	0x01521380,	0x02424500,
	0x00a65ce0,	0x019931e8,	0x02c7121c,	0x001df060,	0x0263f10c,
	0x0130e960,	0x00f04578,	0x0373ddfc,	0x02ac92a8,	0x02637270,
	0x02153450,	0x0370d860,	0x02419e08,	0x00cc0c00,	0x001aaf3c,
	0x03a0b8a8,	0x02c7aa98,	0x0161ae30,	0x0228c3e8,	0x0213f880,
	0x026bf5cc,	0x02a194cc,	0x0249900c,	0x01cb5dd0,	0x014ecb50,
	0x03a7c8a8,	0x03dbc448,	0x018972f8,	0x0271c440,	0x003e28a8,
	0x001d2d14,	0x0154a360,	0x00ba069c,	0x02e11c00,	0x015fd61c,
	0x02d89c88,	0x03096580,	0x004c4a60,	0x03db3e40,	0x0130c2e8,
	0x02e1a850,	0x02d82a10,	0x01edf3a0,	0x01e5bc80,	0x025963c0,
	0x001e93e8,	0x0137c198,	0x02e049b8,	0x02eb6dd4,	0x0202f53c,
	0x03d3a2d8,	0x010f99f4,	0x0160f570,	0x02a27d00,	0x00b422b8,
	0x03e2dce8,	0x032bb650,	0x03195808,	0x019ddfc8,	0x0134bec8,
	0x01891c64,	0x02e204c8,	0x02664120,	0x03eab4fc,	0x03412680,
	0x02bca4c0,	0x01a25cc0,	0x03e9ab28,	0x02c59020,	0x020a9950,
	0x00f86e18,	0x0048d210,	0x034d182c,	0x0120a710,	0x0148595c,
	0x022eae0c,	0x03833a28,	0x02a2c600,	0x003c3784,	0x0123d054,
	0x00b65a10,	0x00694c90,	0x022469a0,	0x0241a550,	0x003db850,
	0x023f1d4c,	0x00d2fa08,	0x031d7258,	0x019c2ee0,	0x021b11e0,
	0x022d86dc,	0x032051c0,	0x02043040,	0x00b555dc,	0x0121d360
};

static uint32 ThirteenPack[] =
{
	0x037b65d4,	0x039a56a8,	0x01b75398,	0x00f4601c,	0x005e7f28,
	0x004ceeb4,	0x00387688,	0x016539c0,	0x0217d698,	0x01079bbc,
	0x0375ec80,	0x038090a0,	0x03244320,	0x029d8dc8,	0x02263630,
	0x01614ad0,	0x01a292b4,	0x022d9718,	0x001ae82c,	0x033dfa10,
	0x03b2e194,	0x00542300,	0x03c63dc0,	0x02412090,	0x03ee58c0,
	0x01e51d00,	0x01248920,	0x0242e9c8,	0x0264d698,	0x0391ebf8,
	0x03d3d700,	0x037d4be8,	0x01c1f1b0,	0x01bad124,	0x03d38150,
	0x01504ca8,	0x01246300,	0x02d2d8e8,	0x01335204,	0x0374abd0,
	0x02acbbe4,	0x027684d8,	0x012c72a8,	0x0067a088,	0x020ff098,
	0x02f89400,	0x0167c178,	0x02177330,	0x007f9698,	0x01544850,
	0x02063120,	0x000b7c88,	0x02a1e260,	0x00c2e4c0,	0x02b07b10,
	0x00a7d680,	0x03a28a2c,	0x03f08194,	0x003a9438,	0x00f33340,
	0x02d90b70,	0x03c88790,	0x028b8a5c,	0x028b4198,	0x01cb4fe0,
	0x0334b588,	0x01af74a0,	0x03f5f868,	0x01545888,	0x02899918,
	0x02acf554,	0x00b2c928,	0x02c26160,	0x02e060a8,	0x0099a3c0,
	0x0376f788,	0x03624a90,	0x01af301c,	0x02418c20,	0x019c9884,
	0x00b2f1a0,	0x02240358,	0x01902a60,	0x02881a08,	0x035d36f4,
	0x02de6038,	0x026678e8,	0x01543440,	0x00f58ba0,	0x0094d370,
	0x0190a260,	0x015133c0,	0x0245782c,	0x0050f398,	0x0051a060,
	0x028956a0,	0x03efccd0,	0x03212920,	0x0330f74c,	0x031ffb74
};

static uint32 FourteenPack[] =
{
	0x0094e020,	0x01464d4c,	0x01a98324,	0x011cbe80,	0x021018f8,
	0x00094380,	0x03191500,	0x003d1a6c,	0x02d1c010,	0x0028b038,
	0x014317c0,	0x03f5f2d4,	0x015a3fcc,	0x02069788,	0x02051284,
	0x02cdc600,	0x039a4760,	0x0085b360,	0x033bd530,	0x00b744b0,
	0x029182a0,	0x0373b964,	0x0126ffd8,	0x01e56ab0,	0x020f6b6c,
	0x02ff3e94,	0x0124e660,	0x02179860,	0x0388bbe0,	0x009101e8,
	0x0053489c,	0x036256f4,	0x022d5500,	0x02504314,	0x002f1204,
	0x00fc0e40,	0x020160e0,	0x02e91428,	0x00729ac0,	0x02a895a0,
	0x0189d760,	0x02b7bc38,	0x000b1d70,	0x02fd0810,	0x0241e980,
	0x0352c248,	0x029cd0a0,	0x02a980d4,	0x01210310,	0x01021380,
	0x006a1940,	0x035a3bb8,	0x02871b64,	0x017a3484,	0x02ab98f8,
	0x03203220,	0x03391cf8,	0x018d3f80,	0x00a28710,	0x014e8d50,
	0x02be3ee0,	0x009f93a0,	0x00d5b100,	0x03024780,	0x01900920,
	0x00955568,	0x02ccf430,	0x01aaf3f0,	0x0392f330,	0x032878a8,
	0x02cbfcb0,	0x001ecce4,	0x00f3651c,	0x0165caa0,	0x005ed470,
	0x02aaa014,	0x01a218a0,	0x014adda0,	0x0230e058,	0x018a6880,
	0x028cce0c,	0x016612c4,	0x02634060,	0x00a832a8,	0x004cdde4,
	0x00e3a324,	0x022726f4,	0x00167300,	0x034082a8,	0x0205b350,
	0x01453224,	0x0311e158,	0x03c4899c,	0x0265f9c0,	0x020bb3b8,
	0x023c0010,	0x03d65ce0,	0x01a7ea38,	0x02b3e650,	0x0106df70
};

static uint32 FifteenPack[] =
{
	0x03876660,	0x014afee0,	0x01bb1a20,	0x001102a0,	0x0081c260,
	0x01ddc110,	0x02e1feac,	0x01aac660,	0x01ac0318,	0x00fc1f00,
	0x024b09ac,	0x02682224,	0x0021c4b8,	0x0081c0c4,	0x001ebaa4,
	0x0371da90,	0x03b4896c,	0x022a0f20,	0x00a5baa8,	0x009f8240,
	0x0287af08,	0x00112200,	0x02281aa8,	0x02292400,	0x032ac088,
	0x00a2e024,	0x00fe278c,	0x01212050,	0x026800b0,	0x00edc380,
	0x02e60ae0,	0x02842ca0,	0x003d912c,	0x02a42128,	0x02bf27e8,
	0x002a8a80,	0x02881aa4,	0x02848908,	0x0371f000,	0x0151fa90,
	0x01c4fd68,	0x03948080,	0x011983f0,	0x036ad820,	0x008480d4,
	0x02aefba8,	0x022a2460,	0x02312460,	0x02b20480,	0x00320fc0,
	0x032f8098,	0x00b392a4,	0x00112034,	0x035800d4,	0x00e5214c,
	0x02441f68,	0x031904c4,	0x02a90240,	0x02c2fa18,	0x02e9b980,
	0x03972eb0,	0x02226730,	0x00e508b0,	0x03b78050,	0x0262f8a4,
	0x0385f970,	0x037b26f4,	0x00912468,	0x022a09e0,	0x038f8640,
	0x02e1dc38,	0x01020200,	0x03022220,	0x03630634,	0x03942530,
	0x02bf2398,	0x01a85970,	0x02dbc210,	0x01695b80,	0x030bd860,
	0x018f2890,	0x00a48920,	0x030bfae0,	0x00890268,	0x02e6af48,
	0x00480080,	0x0391c234,	0x012102c4,	0x029961f0,	0x0239c298,
	0x00fd074c,	0x03602034,	0x02c2fe68,	0x01aac210,	0x02320260,
	0x000a0460,	0x023bfa90,	0x00090634,	0x013a8338,	0x02ca3c80
};

PuzzlePackSet::PuzzlePackSet(void)
{
	fList.AddItem(new ClassicPuzzlePack("Classic",DefaultPack,50));
	fList.AddItem(new PuzzlePack("Six move puzzles",SixPack,100,6));
	fList.AddItem(new PuzzlePack("Seven move puzzles",SevenPack,100,7));
	fList.AddItem(new PuzzlePack("Eight move puzzles",EightPack,100,8));
	fList.AddItem(new PuzzlePack("Nine move puzzles",NinePack,100,9));
	fList.AddItem(new PuzzlePack("Ten move puzzles",TenPack,100,10));
	fList.AddItem(new PuzzlePack("Eleven move puzzles",ElevenPack,100,11));
	fList.AddItem(new PuzzlePack("Twelve move puzzles",TwelvePack,100,12));
	fList.AddItem(new PuzzlePack("Thirteen move puzzles",ThirteenPack,100,13));
	fList.AddItem(new PuzzlePack("Fourteen move puzzles",FourteenPack,100,14));
	fList.AddItem(new PuzzlePack("Fifteen move puzzles",FifteenPack,100,15));
}

PuzzlePackSet::~PuzzlePackSet(void)
{
	for(int32 i=0; i<fList.CountItems(); i++)
	{
		PuzzlePack *pack = (PuzzlePack*)fList.ItemAt(i);
		delete pack;
	}
}


PuzzlePack::PuzzlePack(const char *name, uint32 *data, const uint32 size,
						const uint8 &moves)
{
	fName=name;
	fSize=size;
	fData=data;
	fMoves=moves;
	fHighest=0;
}

uint32 PuzzlePack::ValueAt(const uint32 &index)
{
	if(index>fSize-1)
		return 0;
	
	return fData[index];
}

uint8 PuzzlePack::MovesRequired(const uint32 &index)
{
	return fMoves;
}

ClassicPuzzlePack::ClassicPuzzlePack(const char *name, uint32 *data, const uint32 size)
	: PuzzlePack(name,data,size,0)
{
}

uint8 ClassicPuzzlePack::MovesRequired(const uint32 &index)
{
	return 6 + (index/5);
}
