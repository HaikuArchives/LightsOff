#include "PuzzlePack.h"

class ClassicPuzzlePack : public PuzzlePack
{
public:
	ClassicPuzzlePack(const char *name, uint32 *data, const uint32 size);
	uint8 MovesRequired(const uint32 &index);
};

static uint32 DefaultPack[] = 
{
	0x00005400,	0x015a82b5,	0x00adef6a,	0x01b88360,	0x01bc5eef,
	0x00ead400,	0x00f8c62f,	0x00aaa880,	0x007d3bea,	0x000039ce,
	0x00ead6b5,	0x00a76d5f,	0x0022aa88,	0x00210800,	0x00010040,
	0x01f08421,	0x01f71000,	0x00455544,	0x01505415,	0x00004400,
	0x0021385e,	0x00e8c62e,	0x00467000,	0x012fc400,	0x01e79c61,
	0x0118fe31,	0x004211c4,	0x01ce7000,	0x00000040,	0x00001000,
	0x011cd671,	0x01f1111f,	0x0198d508,	0x01eb4634,	0x000ac558,
	0x011fc544,	0x000739c0,	0x01555555,	0x00a60c2a,	0x00002800,
	0x00421151,	0x00749d27,	0x00e11d71,	0x00e27f60,	0x0157f0ae,
	0x00477dc4,	0x010917e4,	0x00089220,	0x01151151,	0x01ffffff
};

static uint32 SixPack[] = {
	0x0056babd, 0x00a535d2, 0x01fbb1ef, 0x005ac8b7, 0x0043c128,
	0x014e573e, 0x00861724, 0x016c9693, 0x01b2e5f3, 0x01ecf6ff,
	0x00d9d0b9, 0x01ea373e, 0x00973636, 0x00d2d0ef, 0x0037a1f0,
	0x00545e6d, 0x006afc14, 0x012d0fb5, 0x00c8d9a6, 0x00fad8d4,
	0x00643828, 0x01b2e9dd, 0x00d3dd6b, 0x00d9c365, 0x0076edc4,
	0x00f3a5f4, 0x01dc0f9e, 0x00828fe6, 0x00c1ce2a, 0x0082c414,
	0x011f0a4b, 0x0006d282, 0x00b9484f, 0x00f8e1b3, 0x00d22df7,
	0x01172904, 0x012664da, 0x00c94cbb, 0x00e9554a, 0x018f0364,
	0x005aa974, 0x0049f256, 0x0032675a, 0x00fbecd9, 0x01ace242,
	0x00b08f65, 0x0145a33f, 0x012d0fd1, 0x01b52d13, 0x00a3caee,
	0x01e62bdd, 0x017fa5ef, 0x0142dfc7, 0x0049e874, 0x0068ec74,
	0x00d9d569, 0x0160ee1b, 0x00a5d5ca, 0x0058675b, 0x005ae49b,
	0x0082c169, 0x01cf57dc, 0x0056abf7, 0x00177f3e, 0x01ec3fd2,
	0x00fbf1bd, 0x01dc6d90, 0x00fb68b6, 0x00c7c392, 0x00205e2d,
	0x00db4b04, 0x013b8db0, 0x01b06f7b, 0x01b58b45, 0x01f89726,
	0x00f7b6bd, 0x006271a8, 0x002a4e9b, 0x0049a082, 0x01bbf2ad,
	0x0168b1ef, 0x0093ce0f, 0x016d9bde, 0x00ff963f, 0x001626de,
	0x00fa48ef, 0x01bc7e24, 0x01a4c586, 0x00a7574a, 0x002858d4,
	0x003edcb4, 0x00fa5d4a, 0x005677b6, 0x005466dc, 0x002e3164,
	0x00dbfebb, 0x00ca7c28, 0x01ee064e, 0x01af820c, 0x0032ef7f
};

static uint32 SevenPack[] = {
	0x017aee93, 0x01293cb9, 0x0160ffbb, 0x00f2fea1, 0x0091f6eb,
	0x01e502e6, 0x012565eb, 0x00984696, 0x01e887ff, 0x0192d56c,
	0x01e11516, 0x0068e0b0, 0x0186b068, 0x01c5a0d9, 0x0142c66f,
	0x00e90774, 0x00191159, 0x011645ca, 0x00af2322, 0x002bd25b,
	0x00966a25, 0x01e2df8d, 0x0176a2e7, 0x00d8d35d, 0x01243281,
	0x01d6b7e2, 0x00c1eae4, 0x0074de02, 0x0151eda7, 0x00eea77b,
	0x01b3b791, 0x00f797a3, 0x01fcfb8b, 0x01da3962, 0x01bdfebf,
	0x0152deaf, 0x00f8491a, 0x0156ad65, 0x00cbfaf8, 0x0074f642,
	0x01adf8d6, 0x00d05cef, 0x002a054a, 0x0165ef1b, 0x0056ffb0,
	0x00d4d9ff, 0x00bf5db2, 0x006f6b7f, 0x0083f77b, 0x012526ea,
	0x015ecb7b, 0x01112374, 0x0173bbdd, 0x01a13bdd, 0x00d6f622,
	0x00d0ccb0, 0x00ddf42b, 0x00c3f2e8, 0x005844d3, 0x0106ae64,
	0x00582482, 0x0122c242, 0x006a0764, 0x01de5ee0, 0x01e2df8d,
	0x0176a2e7, 0x00d8d35d, 0x01243281, 0x01d6b7e2, 0x00c1eae4,
	0x0074de02, 0x0151eda7, 0x00eea77b, 0x01b3b791, 0x00f797a3,
	0x01fcfb8b, 0x01da3962, 0x01bdfebf, 0x0152deaf, 0x00f8491a,
	0x0156ad65, 0x00cbfaf8, 0x0074f642, 0x01adf8d6, 0x00d05cef,
	0x002a054a, 0x0165ef1b, 0x0056ffb0, 0x00d4d9ff, 0x00bf5db2,
	0x006f6b7f, 0x0083f77b, 0x012526ea, 0x015ecb7b, 0x01112374,
	0x0173bbdd, 0x01a13bdd, 0x00d6f622, 0x00d0ccb0, 0x00ddf42b
};

static uint32 EightPack[] = {
	0x01c83abc, 0x01e3eb12, 0x01a71cb9, 0x015ee85e, 0x00cdb5d9,
	0x00dd8673, 0x00d994a8, 0x0046a855, 0x01e608c7, 0x00f85533,
	0x01db290c, 0x012a256a, 0x0105d44f, 0x001ce31e, 0x0137c4b9,
	0x0000f6e8, 0x01f8b050, 0x01edee25, 0x01425482, 0x00b12e4a,
	0x0157b1f7, 0x0125618a, 0x0000f608, 0x00092b64, 0x01737105,
	0x00951b30, 0x00c45ddc, 0x00dc80fc, 0x01135eda, 0x0142de55,
	0x00c9769b, 0x01db7496, 0x01597f7b, 0x01a0e7e3, 0x003b2764,
	0x01077acd, 0x00c4d59d, 0x01bfe4ab, 0x0177d269, 0x017318d5,
	0x01fbfa1d, 0x00f87cfa, 0x006d2e2d, 0x008f89e4, 0x0012cf7f,
	0x001bb722, 0x01b3faf0, 0x013b4eb2, 0x005bc468, 0x00d95d28,
	0x01ad0e34, 0x00c16d65, 0x00aa1a5a, 0x00962935, 0x01458bfc,
	0x00fadc3b, 0x012c573c, 0x00788ebf, 0x00ecb5ff, 0x01c3f508,
	0x00fc280b, 0x00972077, 0x00f96faf, 0x00f254fa, 0x006507e0,
	0x00a94e8b, 0x01a96fab, 0x0148aa25, 0x012f4a75, 0x01aa789b,
	0x0119073a, 0x00c2ae64, 0x00f8c49a, 0x001739f4, 0x019ebaef,
	0x004f643e, 0x0151fbba, 0x008bf61b, 0x005c39fa, 0x01f22ab2,
	0x00647c8f, 0x005a2358, 0x0071a8ff, 0x01604589, 0x01735646,
	0x008fff42, 0x00a3689e, 0x01437580, 0x0172e7b6, 0x000e9677,
	0x00974c8b, 0x01fbf3e3, 0x00fe14ea, 0x003e13e0, 0x00ca6455,
	0x01fbb709, 0x0133287e, 0x004d9ebc, 0x0197e7ca, 0x00ea5e97
};

static uint32 NinePack[] = {
	0x01c83edd, 0x00ad618a, 0x00535112, 0x00a3579f, 0x01f3bc88,
	0x004f8f91, 0x00fe96ed, 0x01b7398d, 0x000892a3, 0x01a36c37,
	0x000ae3fc, 0x0113aba3, 0x01af4f72, 0x012561cd, 0x00b88cc5,
	0x0068b5f7, 0x016308f7, 0x01f392d5, 0x01bc2050, 0x0102dada,
	0x0169068c, 0x002cf077, 0x0033dc0b, 0x0018694d, 0x00997107,
	0x01bcde34, 0x00d814fa, 0x01cbdd10, 0x016afdbf, 0x008f8199,
	0x0020f8e9, 0x00aa8316, 0x01108b6c, 0x018ff919, 0x005e4570,
	0x00b5f6e3, 0x0010683b, 0x005553ca, 0x0141352b, 0x00dfccba,
	0x013b6d3a, 0x01ec5879, 0x00727d36, 0x00a36c2a, 0x00cbbf87,
	0x01ac1fac, 0x0063b30d, 0x015b008a, 0x00d5930a, 0x005db8be,
	0x00c2f0de, 0x017852b8, 0x007a21c1, 0x0108833a, 0x0093c624,
	0x01e87cfa, 0x019b7d97, 0x002c133d, 0x01912ec0, 0x015004b7,
	0x0083bdd5, 0x005dbbba, 0x00361419, 0x0086d5f3, 0x01a37322,
	0x01552321, 0x00c94699, 0x00947fbb, 0x01f042c1, 0x002c6c34,
	0x0172a4a6, 0x00d80ba2, 0x0159023c, 0x0123b5a9, 0x00998666,
	0x00af444d, 0x016b550d, 0x00d2630a, 0x003ac8fc, 0x001fe374,
	0x014fd7c1, 0x004b7834, 0x00963aca, 0x016537d1, 0x012cebda,
	0x00d0aa35, 0x00d44282, 0x01e96b69, 0x0117f62f, 0x01ad4beb,
	0x014e1755, 0x0043919b, 0x0151d432, 0x00aedd1a, 0x01289e92,
	0x00ed4b9b, 0x0146246f, 0x0105c590, 0x0152db29, 0x01254f26
};

static uint32 TenPack[] = {
	0x01c83e9a, 0x01e5a7a2, 0x015b31b0, 0x00f45a46, 0x006a8ba3,
	0x01b006ac, 0x016beece, 0x00f32974, 0x019f4fc7, 0x019e6379,
	0x01e122d6, 0x002f7b8a, 0x00cbbb06, 0x012e3ac4, 0x0132a9f9,
	0x00af61bb, 0x01320c06, 0x01b56fd6, 0x0070ae90, 0x002b7835,
	0x009bfd83, 0x017b2d76, 0x0139335b, 0x00ede726, 0x00a9ee09,
	0x00fe8672, 0x00b2c136, 0x01842fd0, 0x0196349e, 0x01668405,
	0x00d09fce, 0x01af86b5, 0x00df0c1c, 0x0098e5c8, 0x00aed194,
	0x0012314a, 0x004686e8, 0x00d6b8ed, 0x00d724bf, 0x00b903eb,
	0x00bf79b5, 0x011a40b4, 0x008696e3, 0x00d73c74, 0x00d63ee8,
	0x006b6bad, 0x01855ec1, 0x006a977b, 0x004af513, 0x00b193b0,
	0x01bc1933, 0x0137f22f, 0x01ff0055, 0x015ac3eb, 0x005a3d92,
	0x0003cb0e, 0x01140d0d, 0x00ef460d, 0x00da908a, 0x01e8a331,
	0x00df60d5, 0x001ef495, 0x0117e13f, 0x0136bdbc, 0x0007d535,
	0x012ae96c, 0x00327eb5, 0x01bd0cb2, 0x00dfc8db, 0x019a23c0,
	0x00697ce8, 0x01a1519b, 0x006fbc75, 0x0091ce34, 0x00da8ef6,
	0x0058d466, 0x00f4451e, 0x00449514, 0x01ca8263, 0x0195c934,
	0x006633f8, 0x00a81654, 0x004dc74d, 0x01023ea4, 0x000fc72e,
	0x01d22cad, 0x00a5b01d, 0x01b41537, 0x012cfebc, 0x006b92c5,
	0x00411dff, 0x00e90255, 0x01878e75, 0x005d84f1, 0x015e79d9,
	0x01bb5efa, 0x01630857, 0x0090960b, 0x0003b0e8, 0x008494d1
};

static uint32 ElevenPack[] =
{
	0x01cbe104,	0x028a6450,	0x03359688,	0x01d5e250,	0x0115c048,
	0x012cd32c,	0x016a16a8,	0x0278541c,	0x005af3a8,	0x003ff110,
	0x01e91500,	0x02bbe198,	0x01be8300,	0x02cefce0,	0x03b24ce0,
	0x00b3d5fc,	0x03085f2c,	0x00c7961c,	0x01ffb46c,	0x01320f20,
	0x0203eb74,	0x001fa408,	0x030b8de0,	0x01096e20,	0x0055d9a4,
	0x007c7eec,	0x02076e70,	0x01d98064,	0x013439e0,	0x000dd4b8,
	0x03b9647c,	0x01a1ff10,	0x039fb134,	0x01971f40,	0x02b03360,
	0x003f9050,	0x01955e80,	0x02135ce8,	0x0191a510,	0x03ef6f28,
	0x039483e4,	0x01e2df1c,	0x0082f1c0,	0x00058040,	0x0370d97c,
	0x007cad84,	0x03682680,	0x03f3e228,	0x020de150,	0x03e4bad0,
	0x02ed2820,	0x01173574,	0x005dbf3c,	0x039357e8,	0x00be24f8,
	0x01318078,	0x02ad0db8,	0x0015b300,	0x0248e838,	0x016ac440,
	0x00227b8c,	0x02d69260,	0x03c71d38,	0x011174c0,	0x01886458,
	0x02ad1e44,	0x03b2c12c,	0x01bdcc30,	0x0163bbf4,	0x02271ab4,
	0x00be3474,	0x011ac548,	0x012993a8,	0x03269944,	0x0083d040,
	0x01abdd20,	0x0326c998,	0x032355c8,	0x019e1f80,	0x01ed526c,
	0x00bf2280,	0x03d6e0c0,	0x028793c0,	0x03e84ce0,	0x01befc4c,
	0x00dd8b30,	0x00094424,	0x02cb8240,	0x009034c0,	0x01760e68,
	0x01246be8,	0x01171660,	0x030ff688,	0x009d9558,	0x01b00ba4,
	0x019c3d48,	0x01da132c,	0x009bb220,	0x01d05f88,	0x0028e600
};

static uint32 TwelvePack[] =
{
	0x0229d688,	0x03d0cca8,	0x0134dbc4,	0x01521380,	0x02424500,
	0x00a65ce0,	0x019931e8,	0x02c7121c,	0x001df060,	0x0263f10c,
	0x0130e960,	0x00f04578,	0x0373ddfc,	0x02ac92a8,	0x02637270,
	0x02153450,	0x0370d860,	0x02419e08,	0x00cc0c00,	0x001aaf3c,
	0x03a0b8a8,	0x02c7aa98,	0x0161ae30,	0x0228c3e8,	0x0213f880,
	0x026bf5cc,	0x02a194cc,	0x0249900c,	0x01cb5dd0,	0x014ecb50,
	0x03a7c8a8,	0x03dbc448,	0x018972f8,	0x0271c440,	0x003e28a8,
	0x001d2d14,	0x0154a360,	0x00ba069c,	0x02e11c00,	0x015fd61c,
	0x02d89c88,	0x03096580,	0x004c4a60,	0x03db3e40,	0x0130c2e8,
	0x02e1a850,	0x02d82a10,	0x01edf3a0,	0x01e5bc80,	0x025963c0,
	0x001e93e8,	0x0137c198,	0x02e049b8,	0x02eb6dd4,	0x0202f53c,
	0x03d3a2d8,	0x010f99f4,	0x0160f570,	0x02a27d00,	0x00b422b8,
	0x03e2dce8,	0x032bb650,	0x03195808,	0x019ddfc8,	0x0134bec8,
	0x01891c64,	0x02e204c8,	0x02664120,	0x03eab4fc,	0x03412680,
	0x02bca4c0,	0x01a25cc0,	0x03e9ab28,	0x02c59020,	0x020a9950,
	0x00f86e18,	0x0048d210,	0x034d182c,	0x0120a710,	0x0148595c,
	0x022eae0c,	0x03833a28,	0x02a2c600,	0x003c3784,	0x0123d054,
	0x00b65a10,	0x00694c90,	0x022469a0,	0x0241a550,	0x003db850,
	0x023f1d4c,	0x00d2fa08,	0x031d7258,	0x019c2ee0,	0x021b11e0,
	0x022d86dc,	0x032051c0,	0x02043040,	0x00b555dc,	0x0121d360
};

static uint32 ThirteenPack[] =
{
	0x037b65d4,	0x039a56a8,	0x01b75398,	0x00f4601c,	0x005e7f28,
	0x004ceeb4,	0x00387688,	0x016539c0,	0x0217d698,	0x01079bbc,
	0x0375ec80,	0x038090a0,	0x03244320,	0x029d8dc8,	0x02263630,
	0x01614ad0,	0x01a292b4,	0x022d9718,	0x001ae82c,	0x033dfa10,
	0x03b2e194,	0x00542300,	0x03c63dc0,	0x02412090,	0x03ee58c0,
	0x01e51d00,	0x01248920,	0x0242e9c8,	0x0264d698,	0x0391ebf8,
	0x03d3d700,	0x037d4be8,	0x01c1f1b0,	0x01bad124,	0x03d38150,
	0x01504ca8,	0x01246300,	0x02d2d8e8,	0x01335204,	0x0374abd0,
	0x02acbbe4,	0x027684d8,	0x012c72a8,	0x0067a088,	0x020ff098,
	0x02f89400,	0x0167c178,	0x02177330,	0x007f9698,	0x01544850,
	0x02063120,	0x000b7c88,	0x02a1e260,	0x00c2e4c0,	0x02b07b10,
	0x00a7d680,	0x03a28a2c,	0x03f08194,	0x003a9438,	0x00f33340,
	0x02d90b70,	0x03c88790,	0x028b8a5c,	0x028b4198,	0x01cb4fe0,
	0x0334b588,	0x01af74a0,	0x03f5f868,	0x01545888,	0x02899918,
	0x02acf554,	0x00b2c928,	0x02c26160,	0x02e060a8,	0x0099a3c0,
	0x0376f788,	0x03624a90,	0x01af301c,	0x02418c20,	0x019c9884,
	0x00b2f1a0,	0x02240358,	0x01902a60,	0x02881a08,	0x035d36f4,
	0x02de6038,	0x026678e8,	0x01543440,	0x00f58ba0,	0x0094d370,
	0x0190a260,	0x015133c0,	0x0245782c,	0x0050f398,	0x0051a060,
	0x028956a0,	0x03efccd0,	0x03212920,	0x0330f74c,	0x031ffb74
};

static uint32 FourteenPack[] =
{
	0x0094e020,	0x01464d4c,	0x01a98324,	0x011cbe80,	0x021018f8,
	0x00094380,	0x03191500,	0x003d1a6c,	0x02d1c010,	0x0028b038,
	0x014317c0,	0x03f5f2d4,	0x015a3fcc,	0x02069788,	0x02051284,
	0x02cdc600,	0x039a4760,	0x0085b360,	0x033bd530,	0x00b744b0,
	0x029182a0,	0x0373b964,	0x0126ffd8,	0x01e56ab0,	0x020f6b6c,
	0x02ff3e94,	0x0124e660,	0x02179860,	0x0388bbe0,	0x009101e8,
	0x0053489c,	0x036256f4,	0x022d5500,	0x02504314,	0x002f1204,
	0x00fc0e40,	0x020160e0,	0x02e91428,	0x00729ac0,	0x02a895a0,
	0x0189d760,	0x02b7bc38,	0x000b1d70,	0x02fd0810,	0x0241e980,
	0x0352c248,	0x029cd0a0,	0x02a980d4,	0x01210310,	0x01021380,
	0x006a1940,	0x035a3bb8,	0x02871b64,	0x017a3484,	0x02ab98f8,
	0x03203220,	0x03391cf8,	0x018d3f80,	0x00a28710,	0x014e8d50,
	0x02be3ee0,	0x009f93a0,	0x00d5b100,	0x03024780,	0x01900920,
	0x00955568,	0x02ccf430,	0x01aaf3f0,	0x0392f330,	0x032878a8,
	0x02cbfcb0,	0x001ecce4,	0x00f3651c,	0x0165caa0,	0x005ed470,
	0x02aaa014,	0x01a218a0,	0x014adda0,	0x0230e058,	0x018a6880,
	0x028cce0c,	0x016612c4,	0x02634060,	0x00a832a8,	0x004cdde4,
	0x00e3a324,	0x022726f4,	0x00167300,	0x034082a8,	0x0205b350,
	0x01453224,	0x0311e158,	0x03c4899c,	0x0265f9c0,	0x020bb3b8,
	0x023c0010,	0x03d65ce0,	0x01a7ea38,	0x02b3e650,	0x0106df70
};

static uint32 FifteenPack[] =
{
	0x03876660,	0x014afee0,	0x01bb1a20,	0x001102a0,	0x0081c260,
	0x01ddc110,	0x02e1feac,	0x01aac660,	0x01ac0318,	0x00fc1f00,
	0x024b09ac,	0x02682224,	0x0021c4b8,	0x0081c0c4,	0x001ebaa4,
	0x0371da90,	0x03b4896c,	0x022a0f20,	0x00a5baa8,	0x009f8240,
	0x0287af08,	0x00112200,	0x02281aa8,	0x02292400,	0x032ac088,
	0x00a2e024,	0x00fe278c,	0x01212050,	0x026800b0,	0x00edc380,
	0x02e60ae0,	0x02842ca0,	0x003d912c,	0x02a42128,	0x02bf27e8,
	0x002a8a80,	0x02881aa4,	0x02848908,	0x0371f000,	0x0151fa90,
	0x01c4fd68,	0x03948080,	0x011983f0,	0x036ad820,	0x008480d4,
	0x02aefba8,	0x022a2460,	0x02312460,	0x02b20480,	0x00320fc0,
	0x032f8098,	0x00b392a4,	0x00112034,	0x035800d4,	0x00e5214c,
	0x02441f68,	0x031904c4,	0x02a90240,	0x02c2fa18,	0x02e9b980,
	0x03972eb0,	0x02226730,	0x00e508b0,	0x03b78050,	0x0262f8a4,
	0x0385f970,	0x037b26f4,	0x00912468,	0x022a09e0,	0x038f8640,
	0x02e1dc38,	0x01020200,	0x03022220,	0x03630634,	0x03942530,
	0x02bf2398,	0x01a85970,	0x02dbc210,	0x01695b80,	0x030bd860,
	0x018f2890,	0x00a48920,	0x030bfae0,	0x00890268,	0x02e6af48,
	0x00480080,	0x0391c234,	0x012102c4,	0x029961f0,	0x0239c298,
	0x00fd074c,	0x03602034,	0x02c2fe68,	0x01aac210,	0x02320260,
	0x000a0460,	0x023bfa90,	0x00090634,	0x013a8338,	0x02ca3c80
};

PuzzlePackSet::PuzzlePackSet(void)
{
	fList.AddItem(new ClassicPuzzlePack("Classic",DefaultPack,50));
	fList.AddItem(new PuzzlePack("Six move puzzles",SixPack,100,6));
	fList.AddItem(new PuzzlePack("Seven move puzzles",SevenPack,100,7));
	fList.AddItem(new PuzzlePack("Eight move puzzles",EightPack,100,8));
	fList.AddItem(new PuzzlePack("Nine move puzzles",NinePack,100,9));
	fList.AddItem(new PuzzlePack("Ten move puzzles",TenPack,100,10));
	fList.AddItem(new PuzzlePack("Eleven move puzzles",ElevenPack,100,11));
	fList.AddItem(new PuzzlePack("Twelve move puzzles",TwelvePack,100,12));
	fList.AddItem(new PuzzlePack("Thirteen move puzzles",ThirteenPack,100,13));
	fList.AddItem(new PuzzlePack("Fourteen move puzzles",FourteenPack,100,14));
	fList.AddItem(new PuzzlePack("Fifteen move puzzles",FifteenPack,100,15));
}

PuzzlePackSet::~PuzzlePackSet(void)
{
	for(int32 i=0; i<fList.CountItems(); i++)
	{
		PuzzlePack *pack = (PuzzlePack*)fList.ItemAt(i);
		delete pack;
	}
}


PuzzlePack::PuzzlePack(const char *name, uint32 *data, const uint32 size,
						const uint8 &moves)
{
	fName=name;
	fSize=size;
	fData=data;
	fMoves=moves;
	fHighest=0;
}

uint32 PuzzlePack::ValueAt(const uint32 &index)
{
	if(index>fSize-1)
		return 0;
	
	return fData[index];
}

uint8 PuzzlePack::MovesRequired(const uint32 &index)
{
	return fMoves;
}

ClassicPuzzlePack::ClassicPuzzlePack(const char *name, uint32 *data, const uint32 size)
	: PuzzlePack(name,data,size,0)
{
}

uint8 ClassicPuzzlePack::MovesRequired(const uint32 &index)
{
	return 6 + (index/5);
}
