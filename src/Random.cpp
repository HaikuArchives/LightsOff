/*
 * Copyright 2018 Haiku, Inc.
 * Distributed under the terms of the MIT License.
 *
 * Author:
 *			Owen Pan <owen.pan@yahoo.com>
 */

#include "Random.h"

//#define NDEBUG
#include <assert.h>	// assert
#include <stdint.h>	// uint16_t
#include <stdlib.h>	// random

static const uint16_t puzzles5move4x4[] = {
	0x01c7, 0x0284, 0x0339, 0x0392, 0x03a6, 0x03fb, 0x0412, 0x0504, 0x056d,
	0x05af, 0x062e, 0x0647, 0x0673, 0x06ec, 0x070c, 0x0738, 0x0751, 0x0765,
	0x0793, 0x07ce, 0x07fa, 0x083e, 0x091c, 0x0928, 0x0941, 0x0983, 0x0a02,
	0x0a5f, 0x0a6b, 0x0b14, 0x0b49, 0x0b7d, 0x0bbf, 0x0bd6, 0x0be2, 0x0c56,
	0x0c94, 0x0cc9, 0x0cfd, 0x0d29, 0x0d74, 0x0d82, 0x0db6, 0x0ddf, 0x0deb,
	0x0e03, 0x0e37, 0x0e6a, 0x0e9c, 0x0ea8, 0x0ec1, 0x0ef5, 0x0f15, 0x0f21,
	0x0f48, 0x0f7c, 0x0f8a, 0x0fbe, 0x0fd7, 0x0fe3, 0x100e, 0x103a, 0x1067,
	0x1091, 0x10a5, 0x10cc, 0x10f8, 0x1118, 0x1187, 0x11b3, 0x11da, 0x125b,
	0x1299, 0x12f0, 0x13e6, 0x140f, 0x143b, 0x1466, 0x1490, 0x14a4, 0x14cd,
	0x14f9, 0x1519, 0x152d, 0x1544, 0x1570, 0x15b2, 0x15db, 0x15ef, 0x165a,
	0x1698, 0x16f1, 0x1725, 0x174c, 0x178e, 0x1817, 0x1823, 0x187e, 0x1888,
	0x18bc, 0x18d5, 0x18e1, 0x1901, 0x1935, 0x195c, 0x1968, 0x199e, 0x19c3,
	0x19f7, 0x1a1f, 0x1a2b, 0x1a42, 0x1a76, 0x1ab4, 0x1add, 0x1b09, 0x1b3d,
	0x1ba2, 0x1c16, 0x1c22, 0x1c7f, 0x1c89, 0x1cbd, 0x1cd4, 0x1ce0, 0x1d34,
	0x1d5d, 0x1d69, 0x1d9f, 0x1dab, 0x1dc2, 0x1df6, 0x1e1e, 0x1e2a, 0x1e43,
	0x1e77, 0x1e81, 0x1eb5, 0x1edc, 0x1f08, 0x1f55, 0x1f61, 0x1f97, 0x1fa3,
	0x1fca, 0x1ffe, 0x200b, 0x203f, 0x2056, 0x2094, 0x20a0, 0x20c9, 0x20fd,
	0x211d, 0x2129, 0x2140, 0x2174, 0x2182, 0x21df, 0x21eb, 0x226a, 0x22a8,
	0x22c1, 0x2315, 0x237c, 0x23be, 0x240a, 0x243e, 0x2457, 0x2495, 0x24a1,
	0x24fc, 0x2528, 0x2583, 0x25b7, 0x25ea, 0x266b, 0x26a9, 0x27d6, 0x2812,
	0x2826, 0x284f, 0x287b, 0x288d, 0x28b9, 0x28d0, 0x2904, 0x2930, 0x2959,
	0x296d, 0x299b, 0x29c6, 0x29f2, 0x2a1a, 0x2a2e, 0x2a47, 0x2a73, 0x2a85,
	0x2ab1, 0x2aec, 0x2b38, 0x2b51, 0x2b65, 0x2b93, 0x2ba7, 0x2bce, 0x2bfa,
	0x2c7a, 0x2cb8, 0x2cd1, 0x2ce5, 0x2d05, 0x2d58, 0x2d6c, 0x2dae, 0x2dc7,
	0x2df3, 0x2e1b, 0x2e2f, 0x2e46, 0x2e84, 0x2eb0, 0x2eed, 0x2f0d, 0x2f39,
	0x2f92, 0x304b, 0x3089, 0x30e0, 0x31f6, 0x321e, 0x322a, 0x3277, 0x3281,
	0x32b5, 0x32dc, 0x32e8, 0x3308, 0x3397, 0x33a3, 0x33ca, 0x344a, 0x34e1,
	0x3535, 0x355c, 0x359e, 0x361f, 0x362b, 0x3676, 0x36b4, 0x36dd, 0x36e9,
	0x3709, 0x373d, 0x3754, 0x3760, 0x37a2, 0x37cb, 0x37ff, 0x380f, 0x383b,
	0x3852, 0x3866, 0x3890, 0x38cd, 0x3919, 0x392d, 0x3970, 0x39b2, 0x3a07,
	0x3a33, 0x3a5a, 0x3a6e, 0x3a98, 0x3aac, 0x3ac5, 0x3af1, 0x3b11, 0x3b25,
	0x3b4c, 0x3b78, 0x3b8e, 0x3bd3, 0x3be7, 0x3c3a, 0x3c91, 0x3ca5, 0x3d18,
	0x3d45, 0x3d87, 0x3db3, 0x3dda, 0x3dee, 0x3e06, 0x3e5b, 0x3e6f, 0x3e99,
	0x3ead, 0x3ec4, 0x3ef0, 0x3f24, 0x3f4d, 0x3f79, 0x3f8f, 0x3fbb, 0x3fd2,
	0x400d, 0x4039, 0x4050, 0x4092, 0x40a6, 0x40cf, 0x40fb, 0x411b, 0x412f,
	0x4146, 0x4184, 0x41b0, 0x41d9, 0x41ed, 0x4205, 0x4258, 0x429a, 0x42ae,
	0x42c7, 0x42f3, 0x437a, 0x43b8, 0x43d1, 0x43e5, 0x4438, 0x4451, 0x4465,
	0x451a, 0x452e, 0x4547, 0x4573, 0x4585, 0x45d8, 0x45ec, 0x4659, 0x466d,
	0x4712, 0x4726, 0x474f, 0x477b, 0x478d, 0x47d0, 0x4814, 0x4820, 0x4849,
	0x487d, 0x488b, 0x48bf, 0x48e2, 0x4902, 0x4936, 0x496b, 0x499d, 0x49a9,
	0x49c0, 0x49f4, 0x4a1c, 0x4a41, 0x4a75, 0x4ade, 0x4b0a, 0x4b3e, 0x4b57,
	0x4b63, 0x4ba1, 0x4bfc, 0x4c8a, 0x4cd7, 0x4ce3, 0x4d37, 0x4d5e, 0x4d6a,
	0x4d9c, 0x4da8, 0x4dc1, 0x4df5, 0x4eb6, 0x4f0b, 0x4f94, 0x4fc9, 0x5024,
	0x504d, 0x5079, 0x508f, 0x50bb, 0x50d2, 0x50e6, 0x5106, 0x5132, 0x515b,
	0x516f, 0x5199, 0x51ad, 0x51f0, 0x522c, 0x5245, 0x5271, 0x5287, 0x52b3,
	0x52da, 0x52ee, 0x530e, 0x533a, 0x5353, 0x5367, 0x5391, 0x53a5, 0x53cc,
	0x53f8, 0x5425, 0x544c, 0x5478, 0x548e, 0x54ba, 0x54d3, 0x54e7, 0x555a,
	0x55c5, 0x55f1, 0x562d, 0x5644, 0x5670, 0x5686, 0x56b2, 0x56db, 0x56ef,
	0x570f, 0x573b, 0x5766, 0x57a4, 0x57cd, 0x57f9, 0x5809, 0x583d, 0x5854,
	0x5896, 0x58a2, 0x58cb, 0x58ff, 0x591f, 0x592b, 0x5942, 0x5976, 0x59dd,
	0x59e9, 0x5a01, 0x5a35, 0x5a5c, 0x5a68, 0x5a9e, 0x5aaa, 0x5ac3, 0x5af7,
	0x5b23, 0x5b4a, 0x5b7e, 0x5b88, 0x5bbc, 0x5bd5, 0x5be1, 0x5c08, 0x5c3c,
	0x5c55, 0x5c97, 0x5ca3, 0x5cca, 0x5cfe, 0x5d2a, 0x5d81, 0x5db5, 0x5e34,
	0x5e5d, 0x5e69, 0x5e9f, 0x5eab, 0x5ec2, 0x5ef6, 0x5f16, 0x5f4b, 0x5f7f,
	0x5f89, 0x5fbd, 0x5fd4, 0x5fe0, 0x6015, 0x607c, 0x608a, 0x60be, 0x60d7,
	0x60e3, 0x616a, 0x61c1, 0x61f5, 0x621d, 0x6229, 0x6274, 0x6282, 0x62b6,
	0x62df, 0x62eb, 0x630b, 0x633f, 0x6356, 0x6394, 0x63c9, 0x63fd, 0x6414,
	0x6449, 0x647d, 0x648b, 0x64bf, 0x64d6, 0x64e2, 0x6502, 0x6536, 0x655f,
	0x656b, 0x659d, 0x65a9, 0x65c0, 0x661c, 0x6628, 0x6641, 0x6675, 0x6683,
	0x66b7, 0x66de, 0x66ea, 0x670a, 0x673e, 0x6757, 0x6763, 0x6795, 0x67a1,
	0x67c8, 0x6838, 0x6865, 0x68fa, 0x691a, 0x6985, 0x6a04, 0x6a30, 0x6a59,
	0x6a6d, 0x6a9b, 0x6aaf, 0x6ac6, 0x6b26, 0x6b4f, 0x6b7b, 0x6b8d, 0x6bb9,
	0x6bd0, 0x6be4, 0x6c0d, 0x6c39, 0x6c92, 0x6ca6, 0x6ccf, 0x6cfb, 0x6d1b,
	0x6d2f, 0x6d46, 0x6d72, 0x6db0, 0x6dd9, 0x6ded, 0x6e05, 0x6e31, 0x6e58,
	0x6e6c, 0x6e9a, 0x6eae, 0x6ec7, 0x6f13, 0x6f27, 0x6f4e, 0x6f7a, 0x6f8c,
	0x6fb8, 0x6fd1, 0x6fe5, 0x7008, 0x7097, 0x70a3, 0x70ca, 0x711e, 0x712a,
	0x7177, 0x7181, 0x71dc, 0x71e8, 0x72f6, 0x734b, 0x7389, 0x73d4, 0x73e0,
	0x7409, 0x743d, 0x7454, 0x7460, 0x74a2, 0x74cb, 0x74ff, 0x751f, 0x752b,
	0x7542, 0x7576, 0x75b4, 0x75dd, 0x75e9, 0x7601, 0x7635, 0x765c, 0x769e,
	0x7717, 0x7723, 0x774a, 0x777e, 0x77bc, 0x77e1, 0x7811, 0x7825, 0x784c,
	0x7878, 0x788e, 0x78d3, 0x78e7, 0x7907, 0x7933, 0x795a, 0x796e, 0x7998,
	0x79ac, 0x79c5, 0x79f1, 0x7a19, 0x7a2d, 0x7ab2, 0x7b0f, 0x7b3b, 0x7b52,
	0x7b66, 0x7bcd, 0x7c10, 0x7c24, 0x7c4d, 0x7c79, 0x7c8f, 0x7cd2, 0x7ce6,
	0x7d06, 0x7d5b, 0x7d6f, 0x7d99, 0x7dad, 0x7dc4, 0x7df0, 0x7e18, 0x7e45,
	0x7e87, 0x7eb3, 0x7eda, 0x7eee, 0x7f3a, 0x7f91, 0x7fa5, 0x7ff8, 0x8007,
	0x8033, 0x805a, 0x806e, 0x8098, 0x80c5, 0x80f1, 0x8111, 0x814c, 0x8178,
	0x818e, 0x81ba, 0x81d3, 0x81e7, 0x820f, 0x823b, 0x8252, 0x8266, 0x8290,
	0x82cd, 0x82f9, 0x8319, 0x8344, 0x8370, 0x8386, 0x83b2, 0x83db, 0x83ef,
	0x8499, 0x84ad, 0x84f0, 0x8524, 0x854d, 0x858f, 0x85bb, 0x85d2, 0x85e6,
	0x8691, 0x86a5, 0x86f8, 0x8718, 0x872c, 0x8745, 0x8787, 0x87b3, 0x87da,
	0x87ee, 0x881e, 0x8881, 0x88b5, 0x88dc, 0x8908, 0x893c, 0x8961, 0x8997,
	0x89a3, 0x89ca, 0x89fe, 0x8a22, 0x8a4b, 0x8a7f, 0x8a89, 0x8abd, 0x8ad4,
	0x8ae0, 0x8b34, 0x8b5d, 0x8b69, 0x8b9f, 0x8bab, 0x8bc2, 0x8bf6, 0x8c76,
	0x8d09, 0x8d54, 0x8dcb, 0x8e17, 0x8e23, 0x8e4a, 0x8f01, 0x8f35, 0x8f5c,
	0x8f68, 0x8f9e, 0x8faa, 0x8ff7, 0x901a, 0x902e, 0x9047, 0x9073, 0x9085,
	0x90b1, 0x90d8, 0x90ec, 0x910c, 0x9138, 0x9151, 0x9193, 0x91a7, 0x91ce,
	0x91fa, 0x9212, 0x9226, 0x924f, 0x927b, 0x928d, 0x92b9, 0x92d0, 0x9304,
	0x9330, 0x9359, 0x939b, 0x93af, 0x93c6, 0x93f2, 0x941b, 0x942f, 0x9446,
	0x9484, 0x94b0, 0x94d9, 0x94ed, 0x950d, 0x9539, 0x9564, 0x9592, 0x95a6,
	0x95cf, 0x95fb, 0x967a, 0x96b8, 0x96d1, 0x96e5, 0x9705, 0x976c, 0x979a,
	0x97ae, 0x97c7, 0x97f3, 0x9803, 0x9837, 0x985e, 0x989c, 0x98a8, 0x98c1,
	0x98f5, 0x9915, 0x9921, 0x9948, 0x997c, 0x998a, 0x99be, 0x99d7, 0x99e3,
	0x9a0b, 0x9a3f, 0x9a56, 0x9a62, 0x9a94, 0x9ac9, 0x9afd, 0x9b1d, 0x9b29,
	0x9b82, 0x9bb6, 0x9bdf, 0x9beb, 0x9c02, 0x9c36, 0x9c5f, 0x9c9d, 0x9ca9,
	0x9cc0, 0x9cf4, 0x9d14, 0x9d49, 0x9d7d, 0x9d8b, 0x9dbf, 0x9dd6, 0x9e0a,
	0x9e3e, 0x9e57, 0x9e63, 0x9e95, 0x9efc, 0x9f28, 0x9f41, 0x9f75, 0x9fea,
	0xa01f, 0xa02b, 0xa042, 0xa076, 0xa0b4, 0xa0dd, 0xa0e9, 0xa109, 0xa13d,
	0xa154, 0xa196, 0xa1a2, 0xa1cb, 0xa1ff, 0xa217, 0xa223, 0xa24a, 0xa27e,
	0xa2bc, 0xa2d5, 0xa2e1, 0xa301, 0xa335, 0xa35c, 0xa39e, 0xa3aa, 0xa3c3,
	0xa3f7, 0xa41e, 0xa42a, 0xa443, 0xa477, 0xa4b5, 0xa4dc, 0xa4e8, 0xa508,
	0xa53c, 0xa555, 0xa561, 0xa597, 0xa5a3, 0xa5ca, 0xa5fe, 0xa616, 0xa622,
	0xa64b, 0xa67f, 0xa6bd, 0xa6d4, 0xa6e0, 0xa734, 0xa75d, 0xa769, 0xa79f,
	0xa7ab, 0xa7c2, 0xa7f6, 0xa806, 0xa85b, 0xa86f, 0xa899, 0xa8ad, 0xa8c4,
	0xa8f0, 0xa924, 0xa94d, 0xa979, 0xa98f, 0xa9bb, 0xa9e6, 0xaa3a, 0xaaa5,
	0xaaf8, 0xab18, 0xab45, 0xabda, 0xac07, 0xac33, 0xac5a, 0xac6e, 0xac98,
	0xacac, 0xacc5, 0xacf1, 0xad11, 0xad25, 0xad4c, 0xad78, 0xadba, 0xadd3,
	0xade7, 0xae0f, 0xae3b, 0xae52, 0xae66, 0xaecd, 0xaef9, 0xaf19, 0xaf2d,
	0xaf70, 0xaf86, 0xafb2, 0xafdb, 0xafef, 0xb002, 0xb036, 0xb05f, 0xb06b,
	0xb09d, 0xb0a9, 0xb0f4, 0xb114, 0xb149, 0xb17d, 0xb18b, 0xb1bf, 0xb1d6,
	0xb1e2, 0xb20a, 0xb23e, 0xb257, 0xb263, 0xb295, 0xb2a1, 0xb2fc, 0xb31c,
	0xb328, 0xb341, 0xb375, 0xb383, 0xb3b7, 0xb3de, 0xb3ea, 0xb403, 0xb437,
	0xb45e, 0xb46a, 0xb49c, 0xb4a8, 0xb4f5, 0xb515, 0xb521, 0xb57c, 0xb58a,
	0xb5be, 0xb5d7, 0xb5e3, 0xb60b, 0xb63f, 0xb656, 0xb662, 0xb694, 0xb6a0,
	0xb6fd, 0xb71d, 0xb729, 0xb774, 0xb782, 0xb7b6, 0xb7df, 0xb7eb, 0xb81b,
	0xb82f, 0xb846, 0xb884, 0xb8d9, 0xb8ed, 0xb90d, 0xb939, 0xb992, 0xb9a6,
	0xb9cf, 0xb9fb, 0xba7a, 0xbab8, 0xbad1, 0xbae5, 0xbb05, 0xbb58, 0xbb6c,
	0xbb9a, 0xbbae, 0xbbf3, 0xbc1a, 0xbc2e, 0xbc47, 0xbc73, 0xbc85, 0xbcd8,
	0xbcec, 0xbd38, 0xbd51, 0xbd65, 0xbdfa, 0xbe12, 0xbe26, 0xbe4f, 0xbe7b,
	0xbe8d, 0xbeb9, 0xbed0, 0xbf04, 0xbf30, 0xbf59, 0xbf6d, 0xbf9b, 0xbfaf,
	0xbfc6, 0xc019, 0xc02d, 0xc070, 0xc10f, 0xc13b, 0xc166, 0xc190, 0xc1a4,
	0xc1cd, 0xc225, 0xc278, 0xc35a, 0xc398, 0xc3c5, 0xc418, 0xc445, 0xc471,
	0xc487, 0xc4b3, 0xc4da, 0xc4ee, 0xc50e, 0xc53a, 0xc553, 0xc567, 0xc591,
	0xc5a5, 0xc5cc, 0xc5f8, 0xc64d, 0xc679, 0xc68f, 0xc6bb, 0xc6d2, 0xc6e6,
	0xc706, 0xc732, 0xc75b, 0xc76f, 0xc799, 0xc7ad, 0xc7f0, 0xc8f6, 0xc94b,
	0xc989, 0xc9d4, 0xc9e0, 0xca97, 0xcaa3, 0xcaca, 0xcb1e, 0xcb2a, 0xcb77,
	0xcb81, 0xcbb5, 0xcbdc, 0xcc01, 0xcc35, 0xcc5c, 0xcc9e, 0xcd17, 0xcd23,
	0xcd4a, 0xcd7e, 0xcd88, 0xcdbc, 0xcde1, 0xce09, 0xce3d, 0xce54, 0xce60,
	0xcea2, 0xcecb, 0xceff, 0xcf1f, 0xcf2b, 0xcf42, 0xcfb4, 0xcfdd, 0xcfe9,
	0xd004, 0xd059, 0xd06d, 0xd09b, 0xd0af, 0xd0c6, 0xd0f2, 0xd112, 0xd126,
	0xd14f, 0xd17b, 0xd18d, 0xd1b9, 0xd20c, 0xd251, 0xd265, 0xd293, 0xd2a7,
	0xd2ce, 0xd2fa, 0xd31a, 0xd32e, 0xd347, 0xd373, 0xd385, 0xd3b1, 0xd3ec,
	0xd405, 0xd458, 0xd46c, 0xd49a, 0xd4ae, 0xd4c7, 0xd4f3, 0xd57a, 0xd5b8,
	0xd5d1, 0xd5e5, 0xd60d, 0xd650, 0xd664, 0xd692, 0xd6a6, 0xd6cf, 0xd6fb,
	0xd71b, 0xd72f, 0xd746, 0xd784, 0xd7b0, 0xd7d9, 0xd7ed, 0xd81d, 0xd829,
	0xd874, 0xd882, 0xd8b6, 0xd8df, 0xd8eb, 0xd90b, 0xd93f, 0xd956, 0xd994,
	0xd9c9, 0xd9fd, 0xda15, 0xda48, 0xda7c, 0xda8a, 0xdabe, 0xdad7, 0xdae3,
	0xdb6a, 0xdba8, 0xdbc1, 0xdbf5, 0xdc1c, 0xdc28, 0xdc41, 0xdc75, 0xdc83,
	0xdcb7, 0xdcde, 0xdcea, 0xdd0a, 0xdd57, 0xdd63, 0xdd95, 0xdda1, 0xddfc,
	0xde14, 0xde49, 0xde7d, 0xde8b, 0xdebf, 0xded6, 0xdee2, 0xdf02, 0xdf36,
	0xdf5f, 0xdf6b, 0xdf9d, 0xdfa9, 0xdfc0, 0xe001, 0xe035, 0xe05c, 0xe09e,
	0xe117, 0xe123, 0xe14a, 0xe17e, 0xe188, 0xe1bc, 0xe1e1, 0xe209, 0xe23d,
	0xe254, 0xe260, 0xe2a2, 0xe2cb, 0xe2ff, 0xe31f, 0xe32b, 0xe342, 0xe376,
	0xe380, 0xe3b4, 0xe3e9, 0xe4f6, 0xe54b, 0xe589, 0xe5d4, 0xe608, 0xe697,
	0xe6a3, 0xe6ca, 0xe71e, 0xe72a, 0xe777, 0xe781, 0xe7b5, 0xe7dc, 0xe818,
	0xe845, 0xe871, 0xe887, 0xe8b3, 0xe8ee, 0xe90e, 0xe93a, 0xe953, 0xe967,
	0xe991, 0xe9a5, 0xe9cc, 0xe9f8, 0xea24, 0xea4d, 0xea79, 0xea8f, 0xeabb,
	0xead2, 0xeae6, 0xeb06, 0xeb32, 0xeb5b, 0xeb6f, 0xeb99, 0xebad, 0xebf0,
	0xec19, 0xec2d, 0xec70, 0xecb2, 0xed0f, 0xed3b, 0xed66, 0xeda4, 0xedcd,
	0xee25, 0xee4c, 0xee78, 0xee8e, 0xeed3, 0xeee7, 0xef5a, 0xef98, 0xefc5,
	0xeff1, 0xf01c, 0xf028, 0xf041, 0xf075, 0xf083, 0xf0b7, 0xf0de, 0xf0ea,
	0xf10a, 0xf13e, 0xf157, 0xf163, 0xf195, 0xf1a1, 0xf1fc, 0xf214, 0xf249,
	0xf27d, 0xf28b, 0xf2bf, 0xf2d6, 0xf2e2, 0xf302, 0xf336, 0xf35f, 0xf36b,
	0xf39d, 0xf3a9, 0xf41d, 0xf429, 0xf474, 0xf482, 0xf4b6, 0xf4df, 0xf4eb,
	0xf50b, 0xf53f, 0xf556, 0xf5a0, 0xf5c9, 0xf5fd, 0xf615, 0xf67c, 0xf68a,
	0xf6be, 0xf6d7, 0xf6e3, 0xf76a, 0xf7a8, 0xf7c1, 0xf7f5, 0xf805, 0xf858,
	0xf86c, 0xf89a, 0xf8ae, 0xf8c7, 0xf8f3, 0xf97a, 0xf9b8, 0xf9d1, 0xf9e5,
	0xfa0d, 0xfa39, 0xfa50, 0xfaa6, 0xfacf, 0xfafb, 0xfb1b, 0xfb2f, 0xfb46,
	0xfb84, 0xfbb0, 0xfbd9, 0xfbed, 0xfc04, 0xfc59, 0xfc6d, 0xfc9b, 0xfcaf,
	0xfcc6, 0xfd12, 0xfd26, 0xfd4f, 0xfd7b, 0xfd8d, 0xfdb9, 0xfdd0, 0xfe38,
	0xfe51, 0xfe65, 0xfefa, 0xff1a, 0xff2e, 0xff47, 0xff73, 0xff85, 0xffec
};
static const int numPuzzles5move4x4 = sizeof puzzles5move4x4 / sizeof(uint16_t);

static const uint16_t puzzles6move4x4[] = {
	0x03b5, 0x0660, 0x071f, 0x0776, 0x07dd, 0x090f, 0x0b5a, 0x0cda, 0x0da5,
	0x0e8f, 0x0ebb, 0x0ee6, 0x0f06, 0x0f5b, 0x0f99, 0x0fad, 0x0ff0, 0x1029,
	0x1082, 0x10eb, 0x1194, 0x1428, 0x1483, 0x14ea, 0x153e, 0x1557, 0x15fc,
	0x1804, 0x1859, 0x186d, 0x18af, 0x18c6, 0x194f, 0x197b, 0x1a38, 0x1c05,
	0x1c58, 0x1c6c, 0x1cae, 0x1cc7, 0x1cf3, 0x1d7a, 0x1db8, 0x1dd1, 0x1de5,
	0x1e39, 0x1e92, 0x1f46, 0x1fed, 0x2018, 0x20b3, 0x20da, 0x210e, 0x2167,
	0x21cc, 0x2419, 0x25a4, 0x2801, 0x2835, 0x285c, 0x289e, 0x2917, 0x2923,
	0x294a, 0x2988, 0x29bc, 0x29e1, 0x2a09, 0x2aa2, 0x2b76, 0x2bdd, 0x2cf6,
	0x2d4b, 0x2ea3, 0x3239, 0x3292, 0x32fb, 0x3384, 0x3638, 0x372e, 0x3747,
	0x37ec, 0x3841, 0x393e, 0x3a14, 0x3a49, 0x3a7d, 0x3abf, 0x3ae2, 0x3b02,
	0x3b5f, 0x3b6b, 0x3d94, 0x3ed7, 0x3ee3, 0x3f6a, 0x3fa8, 0x3fc1, 0x3ff5,
	0x4081, 0x40b5, 0x40dc, 0x4108, 0x4197, 0x41a3, 0x41ca, 0x4289, 0x43f6,
	0x4509, 0x4554, 0x475c, 0x4807, 0x4833, 0x486e, 0x4911, 0x4925, 0x494c,
	0x4978, 0x498e, 0x49d3, 0x4a52, 0x4b2d, 0x4dbb, 0x4de6, 0x506a, 0x50c1,
	0x5115, 0x51be, 0x520b, 0x523f, 0x5256, 0x5294, 0x52c9, 0x52fd, 0x531d,
	0x5329, 0x5382, 0x53df, 0x53eb, 0x546b, 0x560a, 0x563e, 0x5657, 0x5695,
	0x56fc, 0x5728, 0x581a, 0x5965, 0x5a26, 0x5a4f, 0x5a7b, 0x5a8d, 0x5ab9,
	0x5ad0, 0x5b04, 0x5b30, 0x5b59, 0x5b6d, 0x5b9b, 0x5baf, 0x5c1b, 0x5e7a,
	0x5eb8, 0x5ed1, 0x5ee5, 0x5fc7, 0x5ff3, 0x60f0, 0x62a5, 0x62f8, 0x6318,
	0x645a, 0x64f1, 0x6525, 0x658e, 0x660f, 0x663b, 0x6666, 0x66cd, 0x66f9,
	0x6719, 0x672d, 0x6770, 0x67b2, 0x67db, 0x67ef, 0x6a17, 0x6a4a, 0x6bf7,
	0x6c81, 0x6dfe, 0x6e4b, 0x6e7f, 0x6e89, 0x6ebd, 0x6ed4, 0x6ee0, 0x6f34,
	0x6f5d, 0x6f69, 0x6f9f, 0x6fab, 0x6fc2, 0x7084, 0x7139, 0x7192, 0x71a6,
	0x71fb, 0x73c7, 0x742e, 0x7447, 0x7473, 0x74ec, 0x7538, 0x7551, 0x7565,
	0x7612, 0x776d, 0x785f, 0x786b, 0x7914, 0x7949, 0x797d, 0x79bf, 0x7c37,
	0x7c6a, 0x7c9c, 0x7ca8, 0x7cc1, 0x7cf5, 0x7d8a, 0x7dd7, 0x7de3, 0x7ec9,
	0x7fb6, 0x8014, 0x8049, 0x807d, 0x8102, 0x8136, 0x815f, 0x816b, 0x81a9,
	0x821c, 0x8241, 0x8275, 0x830a, 0x833e, 0x8357, 0x8363, 0x83a1, 0x83fc,
	0x85c1, 0x8794, 0x87c9, 0x8892, 0x892f, 0x89ed, 0x8aae, 0x8ac7, 0x8af3,
	0x8b7a, 0x8bb8, 0x8bd1, 0x8be5, 0x8f26, 0x8f7b, 0x9009, 0x903d, 0x9054,
	0x90a2, 0x90cb, 0x90ff, 0x911f, 0x912b, 0x9142, 0x9176, 0x91dd, 0x91e9,
	0x9201, 0x9235, 0x925c, 0x929e, 0x9317, 0x9323, 0x934a, 0x937e, 0x93e1,
	0x9408, 0x9497, 0x94a3, 0x94ca, 0x9581, 0x95b5, 0x96f6, 0x9789, 0x9824,
	0x984d, 0x9879, 0x988f, 0x98bb, 0x98e6, 0x995b, 0x996f, 0x9999, 0x99ad,
	0x99f0, 0x9a18, 0x9ada, 0x9ba5, 0x9c25, 0x9c4c, 0x9c78, 0x9c8e, 0x9ce7,
	0x9d5a, 0x9e19, 0x9f66, 0xa038, 0xa065, 0xa185, 0xa26d, 0xa38d, 0xa40d,
	0xa439, 0xa492, 0xa4a6, 0xa4cf, 0xa4fb, 0xa51b, 0xa52f, 0xa546, 0xa5b0,
	0xa5d9, 0xa5ed, 0xa605, 0xa69a, 0xa6ae, 0xa6c7, 0xa6f3, 0xa77a, 0xa7b8,
	0xa7d1, 0xa7e5, 0xa88a, 0xa8d7, 0xa96a, 0xac14, 0xac49, 0xac7d, 0xac8b,
	0xacbf, 0xad02, 0xad5f, 0xad6b, 0xad9d, 0xada9, 0xadc0, 0xae41, 0xaf3e,
	0xaffc, 0xb025, 0xb15a, 0xb1c5, 0xb219, 0xb22d, 0xb30f, 0xb33b, 0xb366,
	0xb3cd, 0xb44d, 0xb48f, 0xb4bb, 0xb4d2, 0xb4e6, 0xb599, 0xb5ad, 0xb5f0,
	0xb618, 0xb645, 0xb687, 0xb6b3, 0xb6da, 0xb6ee, 0xb791, 0xb7a5, 0xb7f8,
	0xb8ca, 0xb9b5, 0xbaf6, 0xbb4b, 0xbb89, 0xbbd4, 0xbbe0, 0xbc09, 0xbccb,
	0xbd76, 0xbe01, 0xbe35, 0xbe5c, 0xbe9e, 0xbf17, 0xbf23, 0xbf4a, 0xc128,
	0xc494, 0xc4c9, 0xc4fd, 0xc529, 0xc574, 0xc582, 0xc5df, 0xc5eb, 0xc6c1,
	0xc77c, 0xc7be, 0xc9c7, 0xcb92, 0xcc12, 0xcd04, 0xcd6d, 0xcdaf, 0xce2e,
	0xce47, 0xce73, 0xcf38, 0xcf51, 0xcf65, 0xcffa, 0xd04a, 0xd135, 0xd21f,
	0xd22b, 0xd276, 0xd2b4, 0xd2dd, 0xd309, 0xd33d, 0xd44b, 0xd489, 0xd5f6,
	0xd61e, 0xd62a, 0xd677, 0xd681, 0xd6b5, 0xd6dc, 0xd708, 0xd797, 0xd7a3,
	0xd7ca, 0xd83a, 0xd8a5, 0xd9da, 0xda5b, 0xda99, 0xdaf0, 0xdbe6, 0xdc0f,
	0xdc3b, 0xdc66, 0xdccd, 0xdd19, 0xdd2d, 0xdd70, 0xddb2, 0xde5a, 0xde98,
	0xdef1, 0xdf25, 0xdf4c, 0xdf8e, 0xe012, 0xe16d, 0xe1af, 0xe22e, 0xe247,
	0xe273, 0xe2ec, 0xe338, 0xe351, 0xe365, 0xe393, 0xe3ce, 0xe3fa, 0xe684,
	0xe739, 0xe856, 0xe894, 0xe8c9, 0xe8fd, 0xe929, 0xe982, 0xe9df, 0xe9eb,
	0xea6a, 0xeaa8, 0xeac1, 0xeb15, 0xeb7c, 0xebbe, 0xec3e, 0xee6b, 0xefd6,
	0xf00f, 0xf03b, 0xf066, 0xf090, 0xf0cd, 0xf119, 0xf12d, 0xf170, 0xf25a,
	0xf298, 0xf325, 0xf491, 0xf4a5, 0xf518, 0xf587, 0xf5b3, 0xf5da, 0xf699,
	0xf7e6, 0xf84b, 0xf889, 0xf8e0, 0xf9f6, 0xfa1e, 0xfa81, 0xfab5, 0xfadc,
	0xfb97, 0xfba3, 0xfbca, 0xfc4a, 0xfd35, 0xfd5c, 0xfd9e, 0xfe76, 0xff09
};
static const int numPuzzles6move4x4 = sizeof puzzles6move4x4 / sizeof(uint16_t);

static const uint16_t puzzles7move4x4[] = {
	0x184a, 0x1c4b, 0x29af, 0x3fe6, 0x495f, 0x5218, 0x5619, 0x5b17,
	0x67fc, 0x6ef3, 0x71b5, 0x7cbb, 0x8125, 0x832d, 0x9165, 0x936d,
	0x986a, 0x9c6b, 0xa481, 0xa689, 0xad8e, 0xb4c1, 0xb6c9, 0xbbc7,
	0xcf76, 0xd238, 0xd639, 0xdd3e, 0xe3dd, 0xe8da, 0xf594, 0xfa92
};
static const int numPuzzles7move4x4 = sizeof puzzles7move4x4 / sizeof(uint16_t);

// partition the 5x5 grid into 4 subsets
static const int c[] = { 0, 4, 20, 24 };					// corners
static const int d[] = { 6, 8, 12, 16, 18 };				// diagonals
static const int h[] = { 1, 3, 10, 11, 13, 14, 21, 23 };	// horizontal
static const int v[] = { 2, 5, 7, 9, 15, 17, 19, 22 };		// vertical

static const int cSize = 4;
static const int dSize = 5;
static const int hvSize = 8;

static const int threshold = (cSize + hvSize) / 2;


static void
Swap(int& a, int& b)
{
	if (a == b)
		return;

	const int tmp = a;
	a = b;
	b = tmp;
}


static void
CopyArray(int dest[], const int src[], int size)
{
	for (int index = 0; index < size; index++)
		dest[index] = src[index];
}


static bool
find(int m, const int array[], int size)	// array size >= size
{
	for (int index = 0; index < size; index++)
		if (m == array[index])
			return true;

	return false;
}


int
ChooseRandom(int array[], int n, int k)	// array size >= n
{
	assert(k > 0 && k < n);

	const bool chooseComplement = n / k < 2;

	if (chooseComplement)
		k = n - k;

	for (int index = 0; index < k; index++) {
		assert(n - index > 1);
		Swap(array[index], array[index + random() % (n - index)]);
	}

	return chooseComplement ? k : 0;
}


int
ChooseRandom4x4(int array[], int k)	// array size >= 16
{
	assert(k > 0 && k <= 7);

	int puzzle;

	switch (k) {
		case 5:
			puzzle = puzzles5move4x4[random() % numPuzzles5move4x4];
			break;
		case 6:
			puzzle = puzzles6move4x4[random() % numPuzzles6move4x4];
			break;
		case 7:
			puzzle = puzzles7move4x4[random() % numPuzzles7move4x4];
			break;
		default:
			ChooseRandom(array, 16, k);	// 4x4
			puzzle = 0;
	}

	return puzzle;
}


static void
CopyRandom(int*& dest, const int src[], int size)
{
	const int k = size / 2;

	CopyArray(dest, src, size);
	ChooseRandom(dest, size, k);
	dest += k;
}


void
ChooseRandom5x5(int array[], int k)	// array size >= 25
{
	assert(k > 0 && k <= 15);

	int n = 25;	// 5x5

	if (k <= threshold) {
		ChooseRandom(array, n, k);
		return;
	}

	if (k == 15) {
		CopyRandom(array, c, cSize);
		CopyRandom(array, h, hvSize);
		CopyRandom(array, v, hvSize);
		CopyArray(array, d, dSize);
		return;
	}

	// counters
	int C = 0;
	int H = 0;
	int V = 0;

	// upper limits of the counters
	int CMax, HMax, VMax;
	if (k == 14) {
		CMax = 3;
		HMax = VMax = 5;
	} else {
		CMax = cSize;
		HMax = VMax = hvSize;
	}

	for (int index = 0; index < k;) {
		assert(n - index > 0);

		int nextIndex = index;
		if (n - index > 1)
			nextIndex += random() % (n - index);

		const int m = array[nextIndex];
		bool skip = false;

		if (find(m, c, cSize))
			if (C == CMax || C + H == threshold || C + V == threshold)
				skip = true;
			else
				C++;
		else if (find(m, h, hvSize))
			if (H == HMax || C + H == threshold || H + V == hvSize)
				skip = true;
			else
				H++;
		else if (find(m, v, hvSize))
			if (V == VMax || C + V == threshold || H + V == hvSize)
				skip = true;
			else
				V++;

		if (skip)
			array[nextIndex] = array[--n];
		else
			Swap(array[index++], array[nextIndex]);
	}
}
